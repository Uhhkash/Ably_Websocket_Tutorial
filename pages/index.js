import Head from 'next/head';
import Image from 'next/image';
import { useState } from 'react';
import ablyLogo from '../public/ably-logo.svg';
import styles from '../styles/Home.module.css';
import Participants from '../components/Participants';
import { getHistoricalMessages } from '../lib/history';
import CombatEffect from '../components/CombatEffects';


export default function Home(props) {
  const [combatEffect, setCombatEffect] = useState(null); // Tracks the current combat effect
  const [personalEffect, setPersonalEffect] = useState(null); // Tracks the current personal effect
  const [worldEffects, setWorldEffects] = useState([]); // Tracks the current world effects
  const [diceRoll, setDiceRoll] = useState(null); // Tracks the result of the dice roll

  const handleAddWorldEffectClick = async () => {
    try {
      const response = await fetch('/api/random-world', {
        method: 'POST',
      });

      if (response.ok) {
        const data = await response.json();
        const randomWorldText = data.text;

        setWorldEffects((prev) => [...prev, randomWorldText]); // Add the new world effect
      } else {
        console.error('Failed to fetch random world:', await response.text());
      }
    } catch (error) {
      console.error('Error fetching random world:', error);
    }
  };

  const handleAddCombatEffectClick = async () => {
    try {
      const response = await fetch('/api/random-combats', {
        method: 'POST',
      });

      if (response.ok) {
        const data = await response.json();
        const randomCombatText = data.text;

        setCombatEffect(randomCombatText); // Set the current combat effect
      } else {
        console.error('Failed to fetch random combat:', await response.text());
      }
    } catch (error) {
      console.error('Error fetching random combat:', error);
    }
  };

  const handleAddPersonalEffectClick = async () => {
    try {
      const response = await fetch('/api/random-personals', {
        method: 'POST',
      });

      if (response.ok) {
        const data = await response.json();
        const randomPersonalText = data.text;

        setPersonalEffect(randomPersonalText); // Set the current personal effect
      } else {
        console.error('Failed to fetch random personal:', await response.text());
      }
    } catch (error) {
      console.error('Error fetching random personal:', error);
    }
  };

  const handleClearWorldEffectsClick = () => {
    setWorldEffects([]); // Clear all world effects from the screen
  };

  const handleDiceRollClick = () => {
    const randomRoll = Math.floor(Math.random() * 6) + 1; // Generate a number between 1 and 6
    setDiceRoll(randomRoll); // Update the dice roll state
  };

  return (
  <div className={styles.container}>
    <Head>
      <title>Chaos Engine</title>
      <meta name="description" content="Generated by create next app" />
      <link rel="icon" href="https://static.ably.dev/motif-red.svg?realtime-news" type="image/svg+xml" />
    </Head>

    {/* Header Section */}
    <header className={styles.header}>
      <Image alt="ably logo" src={ablyLogo} width="60px" height="60px" />
      <h1 className={styles.title}>Chaos Engine</h1>
    </header>

    {/* Main Content */}
    <main className={styles.main}>
      
      <div className={styles.effects}>
        <div className={styles.effectBox}>
          <h3>World Effects</h3>
          {worldEffects.map((effect, index) => (
            <p key={index}>{effect}</p>
          ))}
        </div>
        <div className={styles.effects}>
          <CombatEffect /> {/* Add the CombatEffect component */}
        </div>
        <div className={styles.effectBox}>
          <h3>Personal Effect</h3>
          {personalEffect && <p>{personalEffect}</p>}
        </div>
      </div>
    </main>

    {/* Sidebar with Buttons */}
    <div className={styles.sidebar}>
      <button
        className={styles.button}
        onClick={handleAddWorldEffectClick}
      >
        Add World Effect
      </button>
      <button
        className={styles.button}
        onClick={handleClearWorldEffectsClick}
      >
        Clear World Effects
      </button>
      <button
        className={styles.button}
        onClick={handleAddCombatEffectClick}
      >
        Get Combat Effect
      </button>
      <button
        className={styles.button}
        onClick={handleAddPersonalEffectClick}
      >
        Get Personal Effect
      </button>
      <button
        className={styles.button}
        onClick={handleDiceRollClick}
      >
        Roll Dice
      </button>
      
      {diceRoll && (
        <div className={styles.diceRoll}>
          <h3>Dice Roll</h3>
          <p>{diceRoll}</p>
        </div>
      )}
    </div>

    {/* Participants Section */}
    <div className={styles.participants}>
      <Participants />
    </div>
  </div>
);

}

export async function getStaticProps() {
  const historicalMessages = await getHistoricalMessages();

  return {
    props: {
      history: historicalMessages || [],
    },
    revalidate: 10,
  };
}
